// DO NOT EDIT THIS FILE!!!!
// このファイルは ./make_hotkey_id_def.sh により ./HotKeys.cs から自動的に作成されました (2021/06/29 14:57:10)

#include "string_type.h"
#include "hotkey_id_defs.h"

namespace hotkey_id_defs {

    std::map<int, const wchar_t*> hotkeyId_name_map = {
        {(GLOBAL_HOTKEY_ID_BASE + 1), _T("ACTIVE_HOTKEY")},
        {(ACTIVE_HOTKEY + 1), _T("ACTIVE2_HOTKEY")},
        {(ACTIVE2_HOTKEY + 1), _T("INACTIVE_HOTKEY")},
        {(INACTIVE_HOTKEY + 1), _T("INACTIVE2_HOTKEY")},
        {(INACTIVE2_HOTKEY + 1), _T("ACTIVEIME_HOTKEY")},
        {(ACTIVEIME_HOTKEY + 1), _T("FULL_ESCAPE_HOTKEY")},
        {(FULL_ESCAPE_HOTKEY + 1), _T("UNBLOCK_HOTKEY")},
        {(UNBLOCK_HOTKEY + 1), _T("NEXT_CAND_TRIGGER_HOTKEY")},
        {(NEXT_CAND_TRIGGER_HOTKEY + 1), _T("PREV_CAND_TRIGGER_HOTKEY")},
        {(PREV_CAND_TRIGGER_HOTKEY + 1), _T("DATE_STRING_HOTKEY1")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 1), _T("CTRL_A_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 2), _T("CTRL_B_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 3), _T("CTRL_C_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 4), _T("CTRL_D_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 5), _T("CTRL_E_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 6), _T("CTRL_F_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 7), _T("CTRL_G_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 8), _T("CTRL_H_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 9), _T("CTRL_I_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 10), _T("CTRL_J_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 11), _T("CTRL_K_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 12), _T("CTRL_L_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 13), _T("CTRL_M_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 14), _T("CTRL_N_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 15), _T("CTRL_O_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 16), _T("CTRL_P_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 17), _T("CTRL_Q_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 18), _T("CTRL_R_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 19), _T("CTRL_S_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 20), _T("CTRL_T_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 21), _T("CTRL_U_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 22), _T("CTRL_V_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 23), _T("CTRL_W_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 24), _T("CTRL_X_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 25), _T("CTRL_Y_HOTKEY")},
        {(CTRL_FUNC_HOTKEY_ID_BASE + 26), _T("CTRL_Z_HOTKEY")},
        {(CTRL_Z_HOTKEY + 1), _T("CTRL_FUNC_HOTKEY_ID_END")},
        {(SPECIAL_HOTKEY_ID_BASE + 1), _T("ENTER_HOTKEY")},
        {(ENTER_HOTKEY + 1), _T("ESC_HOTKEY")},
        {(ESC_HOTKEY + 1), _T("BS_HOTKEY")},
        {(BS_HOTKEY + 1), _T("TAB_HOTKEY")},
        {(TAB_HOTKEY + 1), _T("DEL_HOTKEY")},
        {(DEL_HOTKEY + 1), _T("HOME_HOTKEY")},
        {(HOME_HOTKEY + 1), _T("END_HOTKEY")},
        {(END_HOTKEY + 1), _T("PAGE_UP_HOTKEY")},
        {(PAGE_UP_HOTKEY + 1), _T("PAGE_DOWN_HOTKEY")},
        {(PAGE_DOWN_HOTKEY + 1), _T("LEFT_ARROW_HOTKEY")},
        {(LEFT_ARROW_HOTKEY + 1), _T("RIGHT_ARROW_HOTKEY")},
        {(RIGHT_ARROW_HOTKEY + 1), _T("UP_ARROW_HOTKEY")},
        {(UP_ARROW_HOTKEY + 1), _T("DOWN_ARROW_HOTKEY")},
        {(DOWN_ARROW_HOTKEY + 1), _T("CTRL_LEFT_ARROW_HOTKEY")},
        {(CTRL_LEFT_ARROW_HOTKEY + 1), _T("CTRL_RIGHT_ARROW_HOTKEY")},
        {(CTRL_RIGHT_ARROW_HOTKEY + 1), _T("CTRL_UP_ARROW_HOTKEY")},
        {(CTRL_UP_ARROW_HOTKEY + 1), _T("CTRL_DOWN_ARROW_HOTKEY")},
        {(CTRL_DOWN_ARROW_HOTKEY + 1), _T("CTRL_SPACE_HOTKEY")},
        {(CTRL_SPACE_HOTKEY + 1), _T("CTRL_SHIFT_SPACE_HOTKEY")},
        {(CTRL_SHIFT_SPACE_HOTKEY + 1), _T("CTRL_SHIFT_G_HOTKEY")},
        {(CTRL_SHIFT_G_HOTKEY + 1), _T("CTRL_SHIFT_T_HOTKEY")},
        {(CTRL_SHIFT_T_HOTKEY + 1), _T("CTRL_SEMICOLON_HOTKEY")},
        {(CTRL_SEMICOLON_HOTKEY + 1), _T("CTRL_SHIFT_SEMICOLON_HOTKEY")},
        {(CTRL_SHIFT_SEMICOLON_HOTKEY + 1), _T("CTRL_COLON_HOTKEY")},
        {(CTRL_COLON_HOTKEY + 1), _T("CTRL_SHIFT_COLON_HOTKEY")},
        {(CTRL_SHIFT_COLON_HOTKEY + 1), _T("SPECIAL_HOTKEY_ID_END")},
    };

    const wchar_t* GetHotkeyNameFromId(int id) {
        auto iter = hotkeyId_name_map.find(id);
        return iter != hotkeyId_name_map.end() ? iter->second : _T("?");
    }

} // namespace hotkey_id_defs
