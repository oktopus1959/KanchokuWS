// DO NOT EDIT THIS FILE!!!!
// このファイルは ./make_deckey_id_def.sh により ./DecoderKeys.cs から自動的に作成されました (2021/08/07 16:14:51)

#include "string_type.h"
#include "deckey_id_defs.h"

namespace deckey_id_defs {

    std::map<int, const wchar_t*> deckeyId_name_map = {
        {(GLOBAL_DECKEY_ID_BASE + 1), _T("TOGGLE_DECKEY")},
        {(TOGGLE_DECKEY + 1), _T("ACTIVE_DECKEY")},
        {(ACTIVE_DECKEY + 1), _T("ACTIVE2_DECKEY")},
        {(ACTIVE2_DECKEY + 1), _T("DEACTIVE_DECKEY")},
        {(DEACTIVE_DECKEY + 1), _T("DEACTIVE2_DECKEY")},
        {(DEACTIVE2_DECKEY + 1), _T("STROKE_HELP_ROTATION_DECKEY")},
        {(STROKE_HELP_ROTATION_DECKEY + 1), _T("STROKE_HELP_UNROTATION_DECKEY")},
        {(STROKE_HELP_UNROTATION_DECKEY + 1), _T("DATE_STRING_ROTATION_DECKEY")},
        {(DATE_STRING_ROTATION_DECKEY + 1), _T("DATE_STRING_UNROTATION_DECKEY")},
        {(DATE_STRING_UNROTATION_DECKEY + 1), _T("FULL_ESCAPE_DECKEY")},
        {(FULL_ESCAPE_DECKEY + 1), _T("UNBLOCK_DECKEY")},
        {(UNBLOCK_DECKEY + 1), _T("NEXT_CAND_TRIGGER_DECKEY")},
        {(NEXT_CAND_TRIGGER_DECKEY + 1), _T("PREV_CAND_TRIGGER_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 1), _T("CTRL_A_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 2), _T("CTRL_B_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 3), _T("CTRL_C_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 4), _T("CTRL_D_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 5), _T("CTRL_E_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 6), _T("CTRL_F_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 7), _T("CTRL_G_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 8), _T("CTRL_H_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 9), _T("CTRL_I_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 10), _T("CTRL_J_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 11), _T("CTRL_K_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 12), _T("CTRL_L_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 13), _T("CTRL_M_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 14), _T("CTRL_N_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 15), _T("CTRL_O_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 16), _T("CTRL_P_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 17), _T("CTRL_Q_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 18), _T("CTRL_R_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 19), _T("CTRL_S_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 20), _T("CTRL_T_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 21), _T("CTRL_U_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 22), _T("CTRL_V_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 23), _T("CTRL_W_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 24), _T("CTRL_X_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 25), _T("CTRL_Y_DECKEY")},
        {(CTRL_FUNC_DECKEY_ID_BASE + 26), _T("CTRL_Z_DECKEY")},
        {(CTRL_Z_DECKEY + 1), _T("CTRL_FUNC_DECKEY_ID_END")},
        {(FUNC_DECKEY_START), _T("ESC_DECKEY")},
        {(ESC_DECKEY + 1), _T("HANZEN_DECKEY")},
        {(HANZEN_DECKEY + 1), _T("TAB_DECKEY")},
        {(TAB_DECKEY + 1), _T("CAPS_DECKEY")},
        {(CAPS_DECKEY + 1), _T("ALNUM_DECKEY")},
        {(ALNUM_DECKEY + 1), _T("NFER_DECKEY")},
        {(NFER_DECKEY + 1), _T("XFER_DECKEY")},
        {(XFER_DECKEY + 1), _T("KANA_DECKEY")},
        {(KANA_DECKEY + 1), _T("BS_DECKEY")},
        {(BS_DECKEY + 1), _T("ENTER_DECKEY")},
        {(ENTER_DECKEY + 1), _T("INS_DECKEY")},
        {(INS_DECKEY + 1), _T("DEL_DECKEY")},
        {(DEL_DECKEY + 1), _T("HOME_DECKEY")},
        {(HOME_DECKEY + 1), _T("END_DECKEY")},
        {(END_DECKEY + 1), _T("PAGE_UP_DECKEY")},
        {(PAGE_UP_DECKEY + 1), _T("PAGE_DOWN_DECKEY")},
        {(PAGE_DOWN_DECKEY + 1), _T("UP_ARROW_DECKEY")},
        {(UP_ARROW_DECKEY + 1), _T("DOWN_ARROW_DECKEY")},
        {(DOWN_ARROW_DECKEY + 1), _T("LEFT_ARROW_DECKEY")},
        {(LEFT_ARROW_DECKEY + 1), _T("RIGHT_ARROW_DECKEY")},
        {(CTRL_FUNC_DECKEY_START), _T("CTRL_ESC_DECKEY")},
        {(CTRL_ESC_DECKEY + 1), _T("CTRL_HANZEN_DECKEY")},
        {(CTRL_HANZEN_DECKEY + 1), _T("CTRL_TAB_DECKEY")},
        {(CTRL_TAB_DECKEY + 1), _T("CTRL_CAPS_DECKEY")},
        {(CTRL_CAPS_DECKEY + 1), _T("CTRL_ALNUM_DECKEY")},
        {(CTRL_ALNUM_DECKEY + 1), _T("CTRL_NFER_DECKEY")},
        {(CTRL_NFER_DECKEY + 1), _T("CTRL_XFER_DECKEY")},
        {(CTRL_XFER_DECKEY + 1), _T("CTRL_KANA_DECKEY")},
        {(CTRL_KANA_DECKEY + 1), _T("CTRL_BS_DECKEY")},
        {(CTRL_BS_DECKEY + 1), _T("CTRL_ENTER_DECKEY")},
        {(CTRL_ENTER_DECKEY + 1), _T("CTRL_INS_DECKEY")},
        {(CTRL_INS_DECKEY + 1), _T("CTRL_DEL_DECKEY")},
        {(CTRL_DEL_DECKEY + 1), _T("CTRL_HOME_DECKEY")},
        {(CTRL_HOME_DECKEY + 1), _T("CTRL_END_DECKEY")},
        {(CTRL_END_DECKEY + 1), _T("CTRL_PAGE_UP_DECKEY")},
        {(CTRL_PAGE_UP_DECKEY + 1), _T("CTRL_PAGE_DOWN_DECKEY")},
        {(CTRL_PAGE_DOWN_DECKEY + 1), _T("CTRL_UP_ARROW_DECKEY")},
        {(CTRL_UP_ARROW_DECKEY + 1), _T("CTRL_DOWN_ARROW_DECKEY")},
        {(CTRL_DOWN_ARROW_DECKEY + 1), _T("CTRL_LEFT_ARROW_DECKEY")},
        {(CTRL_LEFT_ARROW_DECKEY + 1), _T("CTRL_RIGHT_ARROW_DECKEY")},
        {(CTRL_DECKEY_START + STROKE_SPACE_DECKEY), _T("CTRL_SPACE_DECKEY")},
        {(CTRL_SHIFT_DECKEY_START + STROKE_SPACE_DECKEY), _T("CTRL_SHIFT_SPACE_DECKEY")},
        //public const int CTRL_SHIFT_G_DECKEY = CTRL_SHIFT_SPACE_DECKEY + 1;         // Ctrl+Shift+G
        //public const int CTRL_SHIFT_T_DECKEY = CTRL_SHIFT_G_DECKEY + 1;             // Ctrl+Shift+T
        //public const int CTRL_SEMICOLON_DECKEY = CTRL_SHIFT_T_DECKEY + 1;           // Ctrl+;
        //public const int CTRL_SHIFT_SEMICOLON_DECKEY = CTRL_SEMICOLON_DECKEY + 1;   // Ctrl+Shift+;
        //public const int CTRL_COLON_DECKEY = CTRL_SHIFT_SEMICOLON_DECKEY + 1;       // Ctrl+:
        //public const int CTRL_SHIFT_COLON_DECKEY = CTRL_COLON_DECKEY + 1;           // Ctrl+Shift+:
        //public const int SPECIAL_DECKEY_ID_END = PREV_CAND_TRIGGER_DECKEY + 1;
    };

    const wchar_t* GetDeckeyNameFromId(int id) {
        auto iter = deckeyId_name_map.find(id);
        return iter != deckeyId_name_map.end() ? iter->second : _T("?");
    }

} // namespace deckey_id_defs
