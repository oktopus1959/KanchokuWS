<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="checkBox_imeSendInputInKana.ToolTip" xml:space="preserve">
    <value>この項目をチェックすると、入力されたひらがなをひらがな入力モードに
合わせた形式に変換してIMEに送信するようになります。

ひらがな入力モードで変換できない文字はそのまま送信されます。
この時、アプリによっては未確定文字が消えてしまうことがあるので
ご注意を。

ローマ字変換／かな変換のどちらにもチェックがない場合は、文字の
Unicode をそのまま送信します。漢字などもそのまま送信されますが、
相手先のアプリによってはIMEに送られないことがあります。
（例： Chrome や VS Code など）</value>
  </data>
  <data name="checkBox_imeSendInputInRoman.ToolTip" xml:space="preserve">
    <value>この項目をチェックすると、入力されたひらがなをローマ字入力モードに
合わせた形式に変換してIMEに送信するようになります。

ローマ字入力モードで変換できない文字はそのまま送信されます。
この時、アプリによっては未確定文字が消えてしまうことがあるので
ご注意を。

ローマ字変換／かな変換のどちらにもチェックがない場合は、文字の
Unicode をそのまま送信します。漢字などもそのまま送信されますが、
相手先のアプリによってはIMEに送られないことがあります。
（例： Chrome や VS Code など）
</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="textBox_historyFile.ToolTip" xml:space="preserve">
    <value>入力履歴ファイルの設定

ファイル名部分には「*」を含むように設定してください。
* を {entry,recent,exclude}に置換した3ファイルが使用されます。

entry ファイルは、履歴検索の対象となるエントリを保存します。
recent ファイルは、直近に使用した履歴を保存します。
exclude ファイルは、履歴検索および履歴登録の対象外となる文字列を保存します。

各ファイルとも1行に1定義の形で記述します。

各ファイルは、漢直窓Sの終了時に内容が上書きされるので、ファイルの内容を
エディタ等で編集する場合は、漢直窓Sを終了させてから行ってください。
</value>
  </data>
  <data name="textBox_mazegakiFile.ToolTip" xml:space="preserve">
    <value>交ぜ書き辞書ファイルの設定

ファイル名部分には「*」を含むように設定してください。
* を「user」に置換したものをユーザー辞書として用います。
(* が含まれない場合は kwmaze.user.dic がユーザー辞書となります)

ユーザー辞書ファイルは漢直窓S終了時に自動的に内容が上書きされるので、
このファイルをエディタ等で編集する場合は漢直を終了させてから行ってください。

交ぜ書き辞書ファイルは、1行に1エントリの形で記述します。
フォーマットについては、「ドキュメント」または、「辞書登録」タブの「交ぜ書き」
テキストボックスのツールチップを参照してください。</value>
  </data>
  <data name="textBox_bushuCompFile.ToolTip" xml:space="preserve">
    <value>部首合成の定義を記述したファイルを設定

部首合成の定義は、各行に3文字または2文字が記述されます。

記述フォーマットについては、「ドキュメント」または「辞書登録」タブの
「部首合成」テキストボックスのツールチップを参照してください。

「辞書登録」タブで部首合成定義を登録した場合、漢直窓Sの終了時にファイル内容が
上書きされるので、ファイルをエディタ等で編集する場合は、漢直窓Sを終了させてから
行ってください。</value>
  </data>
  <data name="textBox_keyboardFile.ToolTip" xml:space="preserve">
    <value>キーボードファイルには、ホットキーIDの順に16進表記の仮想キーコードを
並べたものを記述します。

文字打鍵用のホットキーには、0 ～ 49 (シフト用に 50～99)が
割り振られています。

106キーボードの場合だと、以下のようなホットキーIDになります。
最上段： 「1」= 0, 「2」=1, ..., 「0」=9、
　上段： 「q」=10, ..., 「p」=19、
　中段： 「a」=20, ..., 「;」=29,
　下段： 「z」=30, ..., 「/」=39
スペースキー=40
「-」=41, 「^」=42, 「￥」=43, 「@」=44, 「[」=45, 「:」=46, 「]」=47, 「\」=48
</value>
  </data>
  <data name="comboBox_modifiedToggleKey.ToolTip" xml:space="preserve">
    <value>Ctrlキーの修飾有りで漢直モードと英字モードを切り替えるためのキーの指定

使用するキーの仮想キーコードを16進数で指定します。
仮想キーコードについては「windows 仮想キーコード 一覧」でググると見つかります。
主なキーについては候補を用意してあるので、それを選択してください。

「Ctrlキー修飾有りOFF」が設定された場合は、このキーは「漢直モードON」のための
キーとなります。

キーを使用しない場合は、ComboBoxの内容を削除して空白にしてください。</value>
  </data>
  <data name="comboBox_unmodifiedToggleKey.ToolTip" xml:space="preserve">
    <value>Ctrlキーの修飾なしで漢直モードと英字モードを切り替えるためのキーの指定

使用するキーの仮想キーコードを16進数で指定します。
仮想キーコードについては「windows 仮想キーコード 一覧」でググると見つかります。
主なキーについては候補を用意してあるので、それを選択してください。

「Ctrlキー修飾なしOFF」が設定された場合は、このキーは「漢直モードON」のための
キーとなります。

キーを使用しない場合は、ComboBoxの内容を削除して空白にしてください。</value>
  </data>
  <data name="textBox_saveDictsCalmTime.ToolTip" xml:space="preserve">
    <value>辞書の自動保存時刻になってからの待機時間を設定します(分単位)

辞書の自動保存時刻になってから、漢直モードがONの時に、この待機時間が
経過するまでキー入力操作が行なければ、実際に辞書の保存を実行します。
何かキー入力操作が行われた場合は、ここで設定した時間だけ待機時間が
延長されます。

なお、辞書の自動保存時刻になった時に漢直モードがOFFであるか、あるいは
その後に漢直モードがOFFになれば、その時点でも辞書の保存が実行されます。</value>
  </data>
  <data name="textBox_backFileRotationGeneration.ToolTip" xml:space="preserve">
    <value>辞書ファイルの保存世代数を設定します。

アプリ終了時（または辞書内容を保存て再起動時）には、既存の辞書
ファイルが back ディレクトリにバックアップファイルとして保存されます。

バックアップファイルは、ここで設定した世代数にわたって保存されます。

バックアップファイルの名前には、末尾に世代を表す数字が付加されます。
たとえば、履歴ファイルであれば、 back\\kwhist.user.txt.1 のような名前で
保存されます。古い世代ほど、末尾の数字が大きくなります。
</value>
  </data>
  <data name="checkBox_ignoreOtherHooker.ToolTip" xml:space="preserve">
    <value>他のキー変換ツールとの競合を解消します。

当ツールはキーボードフックを利用して文字コードの変換処理を行っています。
通常、キーボードフックが呼び出されるときは、パラメータの一つである
extraInfo には 0 が設定されています。

当ツールで文字コード変換した場合は、 extraInfo に 0 以外の値を設定して、
SendInput を呼び出しています。そして、無限ループにならないようにするため、
自身が設定した extraInfo を伴ってキーボードフックが呼び出された場合は、
それを無視するようにしています。

当ツール以外にも同様の処理を行っているツールを利用する場合に、
extraInfo の値が当ツールの設定したものだけを無視するようにしていると、
そのツールと当ツールとの間で呼び出しのループが発生することがあります。

そのような場合は、当項目にチェックを入れることで、競合を解消することが
できます。ただし、元々競合していなかったツールからの出力を、当ツールが
無視することになる可能性もあるので、試行しながら設定してください。</value>
  </data>
  <data name="comboBox_SandSAssignedPlane.ToolTip" xml:space="preserve">
    <value>SandS を割り当てるシフト面を選択します。

SandS 方式を有効にすると、スペースキーを押しながら何か別のキーを押すと、
スペースキーがシフトキーあるいは拡張修飾キーとして働くようになります。

「未割り当て」を選択すると、「その他設定 &gt; 拡張修飾キー」のところで
割り当てたシフト面が使われます。

SandS有効時にスペースを入力したい場合は、オートリピートが始まる前に
スペースキーを離してください。

SandS が有効であっても、 Shift+Space はそのまま Shift+Space として
扱われます。</value>
  </data>
  <data name="textBox_SandSEnableSpaceOrRepeatMillisec.ToolTip" xml:space="preserve">
    <value>SandS有効時に Space キーを連続打鍵した時、空白のリピート入力を有効に
するまでの時間(ミリ秒)を設定します。

1回目のSpaceキー単打鍵のキーアップ時から、設定した時間内にSpaceを
押下状態にすると、空白のリピート入力が有効になります。

ここの設定は、上記の「Space単打でワンショットシフト状態にする」がOFFの
場合に有効となります。

リピート状態を無効にするには 0 を設定してください。</value>
  </data>
  <data name="checkBox_OneshotSandSEnabled.ToolTip" xml:space="preserve">
    <value>SandS有効時に、Space単打で次打鍵のみをシフトさせる、ワンショットシフト
機能を有効にします。

これをONにすると、Space単打の後は「ワンショットシフト状態」になり、次の
1打鍵のみをシフトさせることができます。
Ctrl+Space は Space によるシフト状態移行として処理されるようになります。

SandS の拡張シフト面にテーブルファイルの裏面定義を行っているような場合は、
これをONにしておくと、最初にSpace単打することで裏面定義を呼び出せる
ようになります。

ワンショットシフト状態の場合に、Spaceキーを単打すると空白が1つ出力され、
Spaceキーを押下状態にするとリピート出力となります。</value>
  </data>
  <data name="checkBox_useCombinationKeyTimer2.ToolTip" xml:space="preserve">
    <value>同時打鍵判定のタイミングにタイマーを併用します。

当項目にチェックを入れると、連続シフト中の2文字目以降の
押下の時点でタイマーを起動して、上記で設定した時間が
経過したタイミングでも同時判定が行われるようになります。

例：
「薙刀式」で  J→W→R と連続押下した時、R の押下後に
タイマーが起動し、上記条件の時間が経過した
⇒ J, W, R キーの解放を待たずに、J+R⇒「じ」が確定します。
</value>
  </data>
  <data name="checkBox_useCombinationKeyTimer1.ToolTip" xml:space="preserve">
    <value>同時打鍵判定のタイミングにタイマーを併用します。

当項目にチェックを入れると、第1打鍵がシフトキーではなく文字キー
だったときに、タイマーを起動して上記で設定した時間が経過した
タイミングでも同時判定が行われるようになります。

例：
NICOLA配列で文字キーを押下後、シフトキーが押下される前に
上記条件で設定した時間が経過した。
⇒キーの解放を待たずに文字の単打が確定します。</value>
  </data>
  <data name="textBox_combinationKeyTimeMs.ToolTip" xml:space="preserve">
    <value>連続シフトによる同時打鍵で、2文字目以降のキーの同時押下時間を設定します。
同時押下時間がここで設定した時間以上であれば、同時打鍵と判定します。

0 を設定すると2文字目以降についてもキーの押下時の即時判定となります。

例： A押→B押→C押→A上の場合 (設定値が 0 でない場合)
連続シフトの場合、最初の「A押→B押」は無条件で同時打鍵と判定するので、
これにより1文字目が出力されます。
次に「C押→A上」のC・A同時押下時間が設定値未満であれば、2文字目は
同時打鍵とは判定されません。

なお、AよりもCのほうが先に解放された場合は無条件に同時打鍵と判定します。</value>
  </data>
  <data name="textBox_verticalFont.ToolTip" xml:space="preserve">
    <value>縦列鍵盤に表示する文字のフォント

以下のフォーマットでフォントを設定できます。
フォント名とサイズについては、「選択...」ボタンをクリックして
フォントダイアログから選択することもできます。

フォント名 | サイズ(pt) | 左余白(px) | 上余白(px) | ...

フォントは縦書のもの(@が付いてるもの)を選んでください。

セル内での表示位置を「左余白」と「上余白」で調整できます。
余白を指定しない場合(または-99 を指定した場合)、
MS ゴシック、メイリオ、游ゴシックについては、ある程度、自動で
調整しますが、それが気に入らない場合は、適当にピクセル数を
設定してください。

現在の余白値は「余白情報表示」をクリックすると表示されます。

複数のモニターを使用しており、それぞれのDPIが異なる場合は、
モニターの数だけ、左余白と上余白の組合せを繰り返すことが
できます。</value>
  </data>
  <data name="textBox_centerFont.ToolTip" xml:space="preserve">
    <value>中央鍵盤に表示する文字のフォント

以下のフォーマットでフォントを設定できます。
フォント名とサイズについては、「選択...」ボタンをクリックして
フォントダイアログから選択することもできます。

フォント名 | サイズ(pt) | 左余白(px) | 上余白(px) | ...

フォントは縦書のもの(@が付いてるもの)を選んでください。

セル内での表示位置を「左余白」と「上余白」で調整できます。
余白を指定しない場合(または-99 を指定した場合)、
MS ゴシック、メイリオ、游ゴシックについては、ある程度、自動で
調整しますが、それが気に入らない場合は、適当にピクセル数を
設定してください。

現在の余白値は「余白情報表示」をクリックすると表示されます。

複数のモニターを使用しており、それぞれのDPIが異なる場合は、
モニターの数だけ、左余白と上余白の組合せを繰り返すことが
できます。</value>
  </data>
  <data name="textBox_normalFont.ToolTip" xml:space="preserve">
    <value>通常鍵盤に表示する文字のフォント

以下のフォーマットでフォントを設定できます。
フォント名とサイズについては、「選択...」ボタンをクリックして
フォントダイアログから選択することもできます。

フォント名 | サイズ(pt) | 左余白(px) | 上余白(px) | ...

セル内での表示位置を「左余白」と「上余白」で調整できます。
余白を指定しない場合(または-99 を指定した場合)、
MS ゴシック、メイリオ、游ゴシックについては、ある程度、自動で
調整しますが、それが気に入らない場合は、適当にピクセル数を
設定してください。

現在の余白値は「余白情報表示」をクリックすると表示されます。

複数のモニターを使用しており、それぞれのDPIが異なる場合は、
モニターの数だけ、左余白と上余白の組合せを繰り返すことが
できます。

</value>
  </data>
  <data name="label110.ToolTip" xml:space="preserve">
    <value>・「B27」について
「その他設定」&gt;「拡張修飾キー」を「有効」にし、 mod-conversion.txt で
「無変換」などの適当な拡張修飾キーを拡張シフトB面に割り当てると、
「無変換+K」でこの機能を呼び出せるようになります。

・「kana」について
拡張修飾キーや特殊キーは次のように名前で指定することもできます。
半/全=zenkaku, CapsLock=caps, 英数=alnum,
無変換=xfer, 変換=nfer, ひらがな=kana,
右シフト=rshift, Insert=ins</value>
  </data>
  <data name="label69.ToolTip" xml:space="preserve">
    <value>106 (qwerty) でのコード表

1=00, 2=01, 3=02, 4=03, 5=04, 6=05, 7=06, 8=07, 9=08, 0=09
q=10, w=11, e=12, r=13, t=14, y=15, u=16, i=17, o=18, p=19
a=20, s=21, d=22, f=23, g=24, h=25, j=26, k=27, l=28, ;=29,
z=30, x=31, c=32, v=33, b=34, n=35, m=36, ,=37, .=38, /=39,
SP=40, -=41, ^=42, ￥=43, @=44, [=45, :=46, ]=47, ＼=48,
Shift+Space=S40
(コードに 'S' または 's' を前接させるとシフトコードになります。)

拡張シフトA面の'a'=A20
拡張シフトB面のSpace=B40
(A/a または B/b を前接させると拡張シフト面のコードとなります。)

半/全=X1, Caps=X3, 英数=X4, 無変換=X5, 変換=X6, ひらがな=X7
(コードに 'X' または 'x' を前接させると拡張修飾キーや特殊キーになります。)

拡張修飾キーや特殊キーは次のように名前で指定することもできます。
半/全=zenkaku, CapsLock=caps, 英数=alnum,
無変換=xfer, 変換=nfer, ひらがな=kana,
右シフト=rshift, Insert=ins</value>
  </data>
  <data name="comboBox_dateStringKey.ToolTip" xml:space="preserve">
    <value>現在の日時を出力する Ctrlキーの設定

「日時フォーマット」で設定したフォーマットに従って現在の日時を出力します。
設定したCtrlキーを続けて打鍵すると、フォーマットを切り替えながら使用します。

Ctrl+Shift 打鍵の場合は、「日時フォーマット」を末尾から逆順に切り替えます。

Ctrl打鍵の直後に Ctlrl+Shift 打鍵すると取り消しになります。(逆も同じ)

たまに Shift+Backspace を受け付けないアプリがあります。
その場合、前回の出力が消去されませんのでご注意を。</value>
  </data>
  <data name="textBox_dateStringFormat.ToolTip" xml:space="preserve">
    <value>日時変換キーで出力する日時のフォーマットを設定します。

1行1エントリで、複数のフォーマットを設定できます。
フォーマットが複数ある場合、 Ctrlキー (Ctrl+Shiftキー) を連続して打鍵すると、
使用するフォーマットが次々と切り替わります。
Ctrlキー の場合は1つめから正順に、 Ctrl+Shiftキー の場合は末尾から逆順に
使用します。
Ctrlキー の直後に Ctrl+Shiftキー を打つと取り消しになります。(逆も同じ)

フォーマット文字：
yyyy: 4桁の年
yy: 2桁の年
r: 令和の年
MM: 2桁の月
M: 1～2桁の月
dd: 2桁の日
d: 1～2桁の日
HH: 時
mm: 分
ss: 秒

例：
yyyy/MM/DD
令和r年M月d日

と設定した場合、
Ctrlキー ⇒ 2021/09/23
Ctrl+Shiftキー ⇒ 令和3年9月23日
となります。</value>
  </data>
  <data name="comboBox_fullEscapeKey.ToolTip" xml:space="preserve">
    <value>操作の全取消や出力文字列採取ブロッカー設定を行うキーを設定します。

指定したキーの Ctrl修飾および Ctrl-Shift 修飾が使われます。
Ctrl修飾されたキーで全取消およびブロッカー設定となります。
Ctrl-Shift修飾されたキーで、ブロッカーの解除となります。

出力文字列採取ブロッカー設定を行うと、見た目ではミニバッファが
クリアされますが、実際には出力文字列の末尾に採取ブロッカーを
設定しています。内部的には、そのブロッカーを遡って出力文字列を
採取しないようになります。

これは、履歴検索、交ぜ書き変換、部首合成など、後置式の機能
全般に影響します。</value>
  </data>
  <data name="textBox_mazeHistRegisterMinLen.ToolTip" xml:space="preserve">
    <value>交ぜ書き変換履歴を登録する最小語幹長を設定

交ぜ書き変換時の読みの語幹がここで設定した数値より短い場合は、
履歴登録を行いません。

語幹長がここで設定した数値以上の場合は、読みと変換形のそれぞれの
語幹部分をペアにして、自動的に履歴登録を行います。

例： 設定値が 2 の場合
・ 「み力」⇒「魅力」で変換すると、語幹部分のペアである「み力|魅力」が
　登録される
・ 「あう」⇒「逢う」で変換すると、語幹が「あ」で1文字なので登録されない

0 を設定すると、交ぜ書き変換の履歴登録を実行しません。</value>
  </data>
  <data name="textBox_histMapGobiMaxLength.ToolTip" xml:space="preserve">
    <value>履歴変換時の語尾長を設定

たとえば、変換履歴として「あ|逢」が登録されており、当設定で語尾長を
 2 に設定している場合は、以下のような動きとなります。

・「あう」⇒「逢う」が候補として表示される
・「あった」⇒「逢った」が候補として表示される
・「あわない」⇒候補が表示されない(語尾が「わない」で3文字のため)

この数を大きくすると、履歴の先頭に不要な候補が残りやすくなるので、
適当に調整してください。</value>
  </data>
  <data name="label91.ToolTip" xml:space="preserve">
    <value>交ぜ書きブロッカーとは、ミニバッファ(直前の出力内容)から交ぜ書き変換ための
読みを取得する際に、出力の末尾から見ていって、「ここで取得をストップする」と
いうフラグのことです。

交ぜ書き変換では通常のブロッカーの他に交ぜ書き専用のブロッカーも用います。
(通常のブロッカーは「機能キー割当」&gt;「ブロッカー設定/解除」を使って設定/解除
を行えます)

交ぜ書きブロッカーは、拡張修飾キーによるコマンドの leftShiftBlocker および
rightShiftBlocker を呼び出すことで、左右に移動することができます。
(拡張修飾キーについては「その他設定」&gt;「拡張修飾キー」を参照してください)

たとえば、「女性のら致が」を変換すると「女性野良致が」になったりしますが、
変換前に leftShiftBlocker を3回繰り返すと「女性の|ら致が」となるので、そこで
変換すれば「女性の拉致が」になります。

また、変換後の交ぜ書きブロッカーに対しても、
「だいひょうしていあんする」⇒変換⇒「代表して|いあんする」
　　⇒ leftShiftBlocker ⇒「代表し|ていあんする」⇒変換⇒「代表し|提案する」
のような操作が行えます。

交ぜ書き変換を実行すると、通常は変換形＋(活用)語尾の後ろにブロッカーが
置かれますが、設定により、出力文字列の末尾に置くようにすることもできます。
詳細については、「交ぜ書き変換」-「変換形＋活用語尾の後にブロッカーを置く」
のツールチップを参照してください。</value>
  </data>
  <data name="checkBox_mazeNoIfxConnectAny.ToolTip" xml:space="preserve">
    <value>名詞やサ変語幹に対して任意の語尾を許可します。

たとえば「かいはつ /開発/」だけが登録されている時に、「かいはつきき」を
交ぜ書き変換して「開発きき」を得ることができます。

この場合、交ぜ書きブロッカーが末尾(「開発きき|」)に位置するので、
必要に応じてブロッカーを移動してから次の変換を実行してください。

意図しない変換結果になる場合もあるので、問題が多いようなら、チェックを
外してください。</value>
  </data>
  <data name="checkBox_mazeNoIfxConnectKanji.ToolTip" xml:space="preserve">
    <value>名詞やサ変語幹に対して漢字語尾を許可します。

たとえば「やまたい /邪馬台/」だけが登録されている時に、「やまたい国」を
交ぜ書き変換して「邪馬台国」を得ることができます。

ただし、意図しない変換結果になる場合もあるので、問題が多いようなら、
チェックを外してください。（例：「ひどい目にあう」⇒「ひ土井目にあう」）

チェックを外した場合は、次の場合にのみ、漢字語尾を許可するように
なります。
・漢字語尾を除く読みの長さが2～3文字
・読みの部分に漢字を含む
例：
「ぶんき /分岐/」が登録されている時に「分き点」は「分岐点」に変換できるが、
「ぶんき点」は変換できない。</value>
  </data>
  <data name="textBox_mazeGobiLikeTailLen.ToolTip" xml:space="preserve">
    <value>交ぜ書き変換時に、語尾に含める末尾長を設定

変換形の(活用)語尾以降の末尾長がここで設定した文字数以下であれば
それも変換形の語尾に含めます。
「変換形＋活用語尾の後にブロッカーを置く」の設定がONの場合に
有効です。

例：末尾長を 2 に設定した場合
「ぜんりょくをあげて」は「全力を|あげて」になるが、
「ぜんりょくをあげ」は「全力をあげ|」のようになる。
本来は「全力を」までが変換形であるが、それ以降の末尾が「あげて」なら
3文字なのでそのまま末尾として残るが、「あげ」なら2文字なので語尾に
含まれる。</value>
  </data>
  <data name="checkBox_mazeBlockerTail.ToolTip" xml:space="preserve">
    <value>ONにすると、交ぜ書き変換後に、変換形＋活用語尾の後に
交ぜ書きブロッカーを置きます。
OFFにすると、変換文字列全体の末尾にブロッカーを置きます。

交ぜ書きブロッカーがあると、そこで交ぜ書き用の読みの採取が
ブロックされます。

例：「ぜんりょくをあげて」を変換した場合、それぞれ、
・ONなら「全力を|あげて」のように「全力を」の後にブロッカー
・OFFなら「全力をあげて|」のように、末尾にブロッカー
が置かれます。

一度に長い文を入力して後で変換を続けて実行するならONに、
変換単位ごとに入力するなら OFF に設定するとよいでしょう。

なお、拡張修飾キーコマンドの leftShfitBlocker および
 rightShiftBlocker で交ぜ書きブロッカーを移動することができます。</value>
  </data>
  <data name="comboBox_histNumDeckeyId.ToolTip" xml:space="preserve">
    <value>履歴検索の縦列鍵盤表示時に、候補を文字数で絞るモードに
移行するキーの漢直コードを設定します。

初期状態では任意長の候補を検索します。
履歴検索の縦列鍵盤表示時に、ここで指定したキーに続けて
数字キーを押して文字数を指定すると、その長さの候補だけが検索されます。
(ただし、 0 は任意長、 9は9文字以上)

文字数の指定は、履歴検索の縦列鍵盤表示時に、上下矢印キー(↑↓)
でも変更できます。
↓を押すと 1, 2, 3,... と増加し、9 の次に 0 に戻ります。
↑を押すと、 9, 8, 7, ... と減少します。</value>
  </data>
  <data name="textBox_histKanjiWordMinLengthEx.ToolTip" xml:space="preserve">
    <value>難打鍵文字を含む場合の自動履歴登録最小長を設定します。

難打鍵文字とは、「基本設定」タブの「容易打鍵文字」ファイルで
定義された文字以外のものです。

2と設定されている場合、たとえば「憂鬱」を交ぜ書き変換で入力すると、
これは自動で履歴登録されます。

「『憂鬱』が履歴に入ったとして、肝心の『憂』をどうやって出すんだ」という
場合は、「優=憂」という部首連想定義をしておくとよいかと思います。
いったん「優－人⇒憂」という部首合成を実行すると、自動的に「優=憂」
という連想が登録されます。</value>
  </data>
  <data name="checkBox_historySearchKey.ToolTip" xml:space="preserve">
    <value>Ctrl修飾キーで履歴検索を実行し、同時に先頭候補を選択できるようにします。

連続して押すことで、次の候補を選択することもできます。
これは自動履歴検索がOFFの場合でも有効です。

履歴検索・選択は、 「その他設定 &gt; 拡張修飾キー」の「設定」をクリックして開く
「拡張修飾キー設定」ダイアログで、適当なキーに HistNext, HistPrev の呼び出しを
設定することでも可能です。</value>
  </data>
  <data name="checkBox_autoHistEnabled.ToolTip" xml:space="preserve">
    <value>入力時に自動的に履歴検索を実行する設定

ここにチェックを入れると、文字入力時に自動的に履歴を検索してマッチしたものを
候補として表示します。(横列鍵盤表示)
表示された候補は、Tab または Shift+Tab で選択することができます。

あるいは、「矢印キーにより自動履歴候補を選択する」にチェックを入れることで
矢印キーによっても選択ができます。

「履歴検索・候補選択する」にチェックを入れると、手動で検索することも可能なの
で、自動で履歴候補が表示されるのがわずらわしい場合はチェックを外してください。

なお、「履歴検索・候補選択する」を有効にすれば、そこで設定したCtrlキーによっても
自動表示された履歴候補を選択することができます。

なお、履歴候補を縦列鍵盤形式で表示する機能もあります。
こちらは「機能キー割当」のところで設定してください。</value>
  </data>
  <data name="checkBox_mazeRightShiftYomiPos.ToolTip" xml:space="preserve">
    <value>ONにすると、「&gt;」で交ぜ書き読みの開始位置を右に移動します。

「&gt;」は交ぜ書きブロッカーの右移動にも割り当てられていますが、
この設定をONにすると、交ぜ書き読みの開始位置の移動のほうが
優先されます。

いったん、「&lt;」で交ぜ書きブロッカーを左移動させると、その次からは
「&gt;」は交ぜ書きブロッカーの右移動となります。

例：当設定がONで、「彼女にあう」を変換して「彼女似合う」となった場合は、
変換直後に「&gt;」を入力すると変換開始位置が右にシフトするので、
「彼女に逢う」と変換されます。

当設定がOFFの場合は、いったん Esc で読みに戻してから "&gt;" でブロッカーを
右移動して再変換を実行してください。

また、ブロッカーを右端に移動させてから、さらに "&gt;" を打鍵した場合も
変換開始位置の右移動になります。</value>
  </data>
  <data name="button_saveEelllJsTableFile.ToolTip" xml:space="preserve">
    <value>eelll/JS用のテーブルを作成してファイル出力します。

ストローク表から eelll/JS 用のテーブルを作成して eelll-js-table.txt と
いう名前のファイルに出力します。出力先は漢直WSのルートフォルダです。

出力されたファイルの内を eelll/Js の「入力方式」-「ユーザ定義」のところに
コピペしてください。

なお、ローマ字テーブルとは異なり、こちらは打鍵列に空白文字を含むものも
出力されます。</value>
  </data>
  <data name="button_saveRomanTableFile.ToolTip" xml:space="preserve">
    <value>ローマ字テーブルを作成してファイル出力します。

ストローク表からローマ字テーブルを作成して roman-stroke-table.txt と
いう名前のファイルに出力します。出力先は漢直WSのルートフォルダです。

出力されたファイルは Google 日本語入力のローマ字テーブルとして
インポートすることができます。

なお、打鍵列に空白文字を含む場合は、それを「裏面定義プレフィックス」
で置換します。(TUT-Code の2打鍵目スペースによる記号入力や、
 Try-Code での1打鍵目空白による漢字入力など)</value>
  </data>
  <data name="checkBox_autoBushuComp.ToolTip" xml:space="preserve">
    <value>ある2文字の組み合わせで一度部首合成を実行すると、
次からはその2文字を入力した時点で自動的に部首合成を
実行します。

たとえば、一度「日」＋「生」で部首合成を実行し、「星」を出力したと
すると、次に「日生」と（連続して）入力した時点で自動的に「星」に
置換されます。

自動合成の直後であれば、 Escキーを押すことで合成をキャンセルして
元の2文字に戻すことができます。
キャンセル後、もう一度、Escキーを押すと、元の2文字の組み合わせに
対する自動部首合成を無効にするような辞書登録が行われます。

辞書登録の詳細については「辞書登録」-「自動部首合成登録」の
ところのツールチップを参照ください。

なお、自動部首合成直後は、手動の部首合成を無効にしています。
その場合は、もう一度手動部首合成を実行すれば、有効になります。</value>
  </data>
  <data name="checkBox_convertShiftedHiraganaToKatakana.ToolTip" xml:space="preserve">
    <value>Shiftキー(または拡張修飾キー)を押しながら平仮名を入力すると、対応するカタカナに変換します。

※ この設定は、同時打鍵に対しては効果がありません。

使用するシフト面を「通常シフト面」「シフトA面」「シフトB面」から選択します。
（ひらがなからカタカナへのマッピングは自動的に行われるため、
　使用するシフト面へのカタカナ文字設定は不要です。）

シフト面と対応する拡張修飾キーの組み合わせは、拡張修飾キー定義ファイルで設定します。

例：「シフトB面」を選択し、SandS によるシフトを使用する場合
・「デコーダON時に SandS を有効にする」にチェックを入れる
・「拡張修飾キーを有効にする」にチェックを入れる
・拡張修飾キー定義ファイルに次の設定を記述する：
      space=shiftB | none</value>
  </data>
  <data name="textBox_modConversionFile.ToolTip" xml:space="preserve">
    <value>修飾キー変換定義ファイルの設定

SandS、CapsLock、英数、無変換、変換、および右シフトキーを
修飾キーとして使用する際のキー変換定義ファイルを指定します。

定義ファイルの例として、 mod-conversion.txt というファイルを
用意してあります。記述方法は同ファイルを参照してください。

定義ファイルを修正した場合は、漢直窓Sを再起動するか、または
「基本設定」タブの「再読込」をクリックしてください。</value>
  </data>
  <data name="checkBox_extraModifiersEnabled.ToolTip" xml:space="preserve">
    <value>拡張修飾キーを有効にします。

拡張修飾キーには以下のものがあります。
  - Space (SandS有効時)
  - CapsLock
  - 英数
  - 無変換
  - 変換
  - 右シフト

当機能をONにすると、拡張修飾キーに対してシフト面を割り当てたり、
拡張修飾キーを押しながら何かキーを押したときのキー割り当てや
機能割り当てが有効になります。

詳細については mod-conversion.sample.txt ファイルを参照してください。</value>
  </data>
  <data name="label101.ToolTip" xml:space="preserve">
    <value>「拡張修飾キー定義ファイル」に定義した UpperRomanStrokeGuide を
呼び出すことで、一時的に大文字ローマ字による打鍵ガイドを有効にできます。

他に RomanStrokeGuide を呼び出すと、小文字も含めたローマ字読み
打鍵ガイドモードの ON/OFF が行えます。

また HiraganaStrokeGuide を呼び出すと、ひらがな入力による打鍵ガイド
モードのON/OFFが行えます。

上記2つのモードを使う場合は、いったん当該モードをOFFにして漢直モードに
復帰すると、打鍵ガイドが始まります。</value>
  </data>
  <data name="checkBox_upperRomanStrokeGuide.ToolTip" xml:space="preserve">
    <value>大文字のローマ字入力による打鍵ガイドを常に有効にします。

大文字のローマ字入力による打鍵ガイドを有効にした場合、英大文字を
入力するとそれをひらがな(またはカタカナ)に変換して、漢字読みファイルから
該当する漢字を検索して、その打鍵ガイドを表示します。

英大文字以外のキー入力を行うと、漢直モードに戻り、打鍵ガイドが始まります。

なお、当設定がOFFの場合でも、拡張修飾キーにより、打鍵ガイドを呼び出す
こともできます。</value>
  </data>
  <data name="textBox_autoBushuComp.ToolTip" xml:space="preserve">
    <value>自動部首合成の登録を行います。

漢直入力時に部首合成を実行すると、そのときの組み合わせが自動的に
自動部首合成辞書に登録されます。

ここでは、部首合成辞書に入っていない組み合わせも登録することができます。
自動部首合成の定義は、3文字で記述されます。
2文字めと3文字めがこの順で入力されたときに1文字めに変換します。
1文字めが '-' の場合は、2～3文字めの組み合わせによる自動変換を無効に
します。

漢直による入力時に部首合成を実行すると、自動的に自動部首合成辞書に
登録されます。登録された自動部首合成の組み合わせを無効にしたい場合は、
1文字目を '-' にして、その組み合わせを2～3文字めに指定して登録してください。

なお、ここでの登録によらずとも、漢直入力時に 「A-B」または「A&lt;space&gt;B」と
入力してから部首合成を実行すると、「AB」の組み合わせによる自動部首合成を
無効にします。

あるいは、自動部首合成による置換が行われた後、 Escキーまたは「連想直接
変換」キーを押してキャンセルし、さらにもう一度同キーを押すことでも、元の2文字
の組み合わせに対する自動部首合成を無効にすることができます。

無効化された2文字の組み合わせを再び有効化したい場合は、ここで再登録を
行ってください。

例1：
「歌可欠」で登録すると、「可欠」と入力したときに「歌」に自動的に変換されます。
「-可欠」が既に登録されている場合は、それを上書きします。

例2：
「-可欠」で登録すると、「可欠」と入力したときに「歌」への自動変換を実行しません。
「歌可欠」が既に登録されている場合は、それを上書きします。</value>
  </data>
  <data name="button_restartWithNoSave.ToolTip" xml:space="preserve">
    <value>デコーダが保持している辞書内容をファイルに保存せずに再起動します。

エディタなどで辞書ファイルを編集したい場合は、まず「一括保存」で、
デコーダが保持している辞書内容をファイルに反映させます。

その後、辞書ファイルを編集し、当ボタンをクリックしてください。

漢直窓Sは終了時に辞書内容を自動的にファイルに新規保存します。
(既存ファイルは *.back に名前が変更されます)
辞書ファイルを編集したい場合は、ここに記述した手順に従うか、
または漢直窓Sを終了させてから行ってください。
</value>
  </data>
  <data name="textBox_bushuComp.ToolTip" xml:space="preserve">
    <value>部首合成の登録を行います。

部首合成の定義は、3文字または2文字で記述されます。

3文字(ABC)の場合：
B と C を合成(足し算)して A に変換できることを表します。
逆に A が B と C に分解できることも表します。この場合、
A と C から B に変換することができます(引き算)。

2文字(AB)の場合：
A と B が等価文字であることを表します。
「DAC」という定義があったら、A のかわりに B を使って、
B + C ⇒ D という足し算も可能になります。</value>
  </data>
  <data name="button_readBushuAssoc.ToolTip" xml:space="preserve">
    <value>デコーダが保持している連想辞書の内容を読み出します。

テキストボックスに入力された1文字から連想される文字の並びを取得し、テキストボックスに
表示します。これを編集することで、効率よく連想文字の定義ができるようになります。

例：
「非」を入力して「読み出し」ボタンをクリックすると「非=|悲匪輩徘俳誹榧罪排扉」の
ような結果が得られる。これをたとえば「非=悲輩俳誹|匪榧罪排徘扉」のように修正して
「登録」をすると、「非」に対して「悲輩俳誹」の位置を固定することができる
</value>
  </data>
  <data name="textBox_bushuAssoc.ToolTip" xml:space="preserve">
    <value>連想文字の登録を行います。次のフォーマットで記述します。

A=BC...

例えば、「恋=戀変」という記述があると、「恋」から「戀」や「変」への変換が
可能になります。選択された変換文字は、先頭に移動し、漢直WSの終了時に
辞書ファイルに書き込まれます。

変換ターゲット文字列の途中に「|」があると、ターゲットの先頭から「|」までは
順序が固定され、「|」以降の文字が選択された場合は「|」の直後に移動します。

なお、すでに同じ文字に対する連想文字列が登録されている場合は、
ここで登録した文字列がマージされます。既存の文字列が削除されることは
ありません。</value>
  </data>
  <data name="textBox_mazegaki.ToolTip" xml:space="preserve">
    <value>交ぜ書きユーザー辞書に登録するエントリを次のフォーマットで記述します。

読み　/変換形/...

読みの末尾には「/{ひらがな}[:数字]」の形で活用型を指定することもできます。

例1： あ/う  /会/逢/遭/
これは、「ワ行五段活用」の動詞「あう」を読みとして、その変換形が
「会う」「逢う」「遭う」であるという定義になっています。「ワ行五段」
なので、たとえば「あった」にはマッチしますが「あく」にはマッチしません。

例2： かえ/る:1 /変え/替え/換え/
例3： かえ/る:5 /返/帰/

例2は、「一段活用」の動詞「かえる」を読みとして、その変換形が
「変える」「替える」「換える」であるという定義になっています。

例3は、「ラ行五段活用」の動詞「かえる」を読みとして、その変換形が
「返る」「帰る」であるという定義になっています。

イ段・エ段で語尾が「る」の場合は、プログラムに内蔵しているルールによって
変換形の漢字からそれが一段か五段かを判断していますが、その判断が誤って
いるような場合は、上記のように「:数字」を付加してください。

例4： うつくし/い  /美し
例5： ゆううつ/な /憂鬱/
例6： ほんとう/の /本当/

例4は形容詞の定義例、例5は「な」型の形容動詞、例6は「の」型の形容動詞です。
</value>
  </data>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>114, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAQAAAAAADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAwMDAAICAgAAAAP8AAP8AAAD//wD/AAAA/wD/AP//
        AAD///8AAAAAAAAAAAAAAAAAAAAAAA+IiIiIiIiIiIiIiIiIiIAPd3d3d3d3d3d3d3d3d3eAD3ZmdwB3
        cAB3d3d3AHd3gA92ZnAAB3cAB3d3cAB3d4APdmZwAAd3cAB3dwAAd3eAD3ZmdwAAcAAAAAAAAAAHgA92
        ZmdwAHAAAAAAAAAAB4APdmZmcAB3dwAHd3d3d3eAD3ZmZnAABwAAAAAAAAB3gA92ZmZ3AAcAAAAAAAAA
        d4APdmZmZwAHd3AAd3d3d3eAD3ZmZncAdwAAAAAAAAB3gA92ZmdwAHcAAAAAAAAAd4APdmZ3AAB3AHcA
        B3dwAHeAD3ZmcAAHdwB3AAB3cAB3gA92ZncAd3cAAAAAAAAAd4APdmZnd3d3AAAAAAAAAHeAD3ZmZ3AH
        d3cAB3cAB3d3gA92ZmcAAHd3AAd3AAd3d4APdmZnAABwAAAAAAAAAAeAD3ZmZwAHcAAAAAAAAAAHgA92
        Zmdwd3d3AAd3AAd3d4APdmZmd3Z3dwAHdwAHd3eAD3ZmZmZmd3d3d3d3d3d3gA92ZmZmZnd3d3d3d3d3
        d4APdmZmZmZ3d3d3d3d3d3eAD3ZmZmZmd3d3d3d3d3d3gA92ZmZmZnd3d3d3d3d3d4APd3d3d3d3d3d3
        d3d3d3eAD///////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>