#!/bin/bash

BINDIR=$(dirname $0)

SRCFILE=$BINDIR/HotKeys.cs
TGTFILE=$BINDIR/kw-uni/KeysAndChars/hotkey_id_defs.h

cat <<EOS > $TGTFILE
// DO NOT EDIT THIS FILE!!!!
// このファイルは $0 により $SRCFILE から自動的に作成されました ($(date '+%Y/%m/%d %H:%M:%S'))
#pragma once

EOS

sed -n '/public static class HotKeys/,$ p' $SRCFILE | \
    tail -n +2 | \
    grep -v '^ *[{}]' | \
    sed 's/^ *//' | \
    sed 's/public const int/#define/' | \
    sed 's/= /(/' | \
    sed 's/;.*/)/' >> $TGTFILE

cat <<EOS >> $TGTFILE

namespace hotkey_id_defs { const wchar_t* GetHotkeyNameFromId(int id); }
#define HOTKEY_NAME_FROM_ID(id) hotkey_id_defs::GetHotkeyNameFromId(id)
EOS

###
TGTFILE1=$BINDIR/kw-uni/KeysAndChars/hotkey_id_defs.cpp

cat <<EOS > $TGTFILE1
// DO NOT EDIT THIS FILE!!!!
// このファイルは $0 により $SRCFILE から自動的に作成されました ($(date '+%Y/%m/%d %H:%M:%S'))

#include "string_type.h"
#include "hotkey_id_defs.h"

namespace hotkey_id_defs {

    std::map<int, const wchar_t*> hotkeyId_name_map = {
EOS

sed -n '/ACTIVE_HOTKEY/,$ p' $SRCFILE | \
    grep '_HOTKEY ' | \
    sed -r 's/^ *public const int *(\w+) *= *([^;]+).*$/        {(\2), _T("\1")},/' >> $TGTFILE1

cat <<EOS >> $TGTFILE1
    };

    const wchar_t* GetHotkeyNameFromId(int id) {
        auto iter = hotkeyId_name_map.find(id);
        return iter != hotkeyId_name_map.end() ? iter->second : _T("?");
    }

} // namespace hotkey_id_defs
EOS
